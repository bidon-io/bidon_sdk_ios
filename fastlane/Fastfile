default_platform :ios

fastlane_require "dotenv"

# Global variables
$root_dir = File.expand_path(Dir.pwd + "/..")
$build_dir = File.expand_path($root_dir + "/build")
$podspecs_dir = $build_dir + "/Podspecs"
$development_podspec_dir = $root_dir
$scheme = "Release"
$targets = [
  "Bidon",
  "BidonAdapterAmazon",
  "BidonAdapterBidMachine",
  "BidonAdapterGoogleAdManager",
  "BidonAdapterGoogleMobileAds",
  "BidonAdapterAppLovin",
  "BidonAdapterDTExchange",
  "BidonAdapterUnityAds",
  "BidonAdapterMintegral",
  "BidonAdapterBigoAds",
  "BidonAdapterMetaAudienceNetwork",
  "BidonAdapterVungle",
  "BidonAdapterInMobi",
  "BidonAdapterAmazon",
  "BidonAdapterChartboost",
  "BidonAdapterYandex",
  "BidonAdapterIronSource",
  "BidonAdapterMyTarget",
  "BidonAdapterMobileFuse",
  "AppLovinMediationBidonAdapter",
  "ISBidonCustomAdapter"
]

# Defenitions ###
def build_universal(scheme)
  xcargs = [
    "GCC_GENERATE_DEBUGGING_SYMBOLS=NO",
    "STRIP_INSTALLED_PRODUCT=YES",
    "LINK_FRAMEWORKS_AUTOMATICALLY=NO",
    "BUILD_LIBRARY_FOR_DISTRIBUTION=YES",
    "OTHER_CFLAGS=\"-Qunused-arguments\"",
    "ONLY_ACTIVE_ARCH=NO",
    "DEPLOYMENT_POSTPROCESSING=YES",
    "MACH_O_TYPE=staticlib",
    "IPHONEOS_DEPLOYMENT_TARGET=11.0",
    "DEBUG_INFORMATION_FORMAT=\"dwarf\"",
    "SKIP_INSTALL=NO",
    "SKIP_INSTALL=NO",
    "CODE_SIGN_IDENTITY=\"\"",
    "CODE_SIGNING_REQUIRED=NO",
    "CODE_SIGN_ENTITLEMENTS=\"\"",
  ]

  xcodebuild(
    archive: true,
    archive_path: "#{$build_dir}/#{scheme}/archives/ios.xcarchive",
    scheme: scheme,
    workspace: "Bidon.xcworkspace",
    sdk: "iphoneos",
    xcargs: (xcargs + ["VALID_ARCHS=\"arm64 armv7\""]).join(" "),
  )

  xcodebuild(
    archive: true,
    archive_path: "#{$build_dir}/#{scheme}/archives/ios-sim.xcarchive",
    scheme: scheme,
    workspace: "Bidon.xcworkspace",
    sdk: "iphonesimulator",
    xcargs: (xcargs + ["VALID_ARCHS=\"x86_64 arm64\""]).join(" "),
  )
end

def xcframework(scheme, target, framework, version)
  create_xcframework(
    frameworks: [
      "#{$build_dir}/#{scheme}/archives/ios-sim.xcarchive/Products/Library/Frameworks/#{framework}.framework",
      "#{$build_dir}/#{scheme}/archives/ios.xcarchive/Products/Library/Frameworks/#{framework}.framework",
    ],
    output: "#{$build_dir}/#{scheme}/#{target}-#{version}/#{framework}.xcframework",
  )
end

def xclibrary(scheme, target, library, version)
  create_xcframework(
    libraries: [
      "#{$build_dir}/#{scheme}/archives/ios-sim.xcarchive/Products/usr/local/lib/lib#{library}.a",
      "#{$build_dir}/#{scheme}/archives/ios.xcarchive/Products/usr/local/lib/lib#{library}.a",
    ],
    output: "#{$build_dir}/#{scheme}/#{target}-#{version}/#{library}.xcframework"
  )
end


def copy_resources(path, name)
  FileUtils.cp_r($root_dir + "/Bidon/" + name, path)
end

platform :ios do
  before_all do
    Dotenv.load ".env.default"

    clean_build_artifacts

    FileUtils.rm_rf($build_dir)
    FileUtils.mkdir($build_dir)
    FileUtils.mkdir($podspecs_dir)
  end

  desc "Build all modules into xcframeworks"
  lane :sdk do |options|
    raise "No SDK version specified".red if options[:version].nil?

    upload = options[:upload] || false
    version = options[:version]
    adapters_version = options[:adapters_version] || version + ".1"

    cocoapods(use_bundle_exec: true)
    build_universal($scheme)

    $targets.each do |target|
      adapter_identifiers = ["BidonAdapter", "BidonCustomAdapter"]
      is_adapter = adapter_identifiers.any? { |id| target.include?(id) }
      ver = is_adapter ? adapters_version : version

      xcframework($scheme, target, target, ver)

    copy_resources(Dir.pwd() + "/../build/Release/Bidon-#{version}/Bidon.xcframework/ios-arm64/Bidon.framework", "PrivacyInfo.xcprivacy")

    copy_resources(Dir.pwd() + "/../build/Release/Bidon-#{version}/Bidon.xcframework/ios-arm64_x86_64-simulator/Bidon.framework", "PrivacyInfo.xcprivacy")

      zip(
        path: "#{$build_dir}/#{$scheme}/#{target}-#{ver}",
        output_path: "#{$build_dir}/#{$scheme}/#{target}-#{ver}/#{target}.zip",
      )

      aws_s3(
        access_key: ENV["S3_ACCESS_KEY"],
        secret_access_key: ENV["S3_SECRET_ACCESS_KEY"],
        bucket: ENV["S3_BUCKET"],
        region: ENV["S3_REGION"],
        acl: "bucket-owner-full-control",
        path: "#{target}/#{ver}",
        files: ["#{$build_dir}/#{$scheme}/#{target}-#{ver}/#{target}.zip"],
      ) if upload

      podspec(
        name: target,
        version: ver,
        sdk_version: version,
        podfile: $root_dir + "/Podfile",
        s3_region: ENV["S3_REGION"],
        s3_bucket: ENV["S3_BUCKET"],
        path: $podspecs_dir,
        vendored_frameworks: "#{target}-#{ver}/#{target}.xcframework",
        is_adapter: is_adapter,
      )
    end
  end

desc "Build a specific Bidon adapter"
lane :adapter do |options|
  raise "No adapter specified".red if options[:name].nil?
  raise "No adapter version specified".red if options[:version].nil?
  raise "No SDK version specified".red if options[:sdk_version].nil?

  adapter_name = options[:name]
  adapter_version = options[:version]
  sdk_version = options[:sdk_version]
  upload = options[:upload] || false
  skip_build = options[:skip_build].nil? ? false : options[:skip_build]
  should_install_pods = options[:pods].nil? ? false : options[:pods]

  # Install pods if requested
  cocoapods(use_bundle_exec: true) if should_install_pods

  # Build Bidon core framework
  unless skip_build
    UI.message("ðŸ“¦ Building Bidon SDK...")
    build_universal("Bidon")
    xcframework("Bidon", "Bidon", "Bidon", sdk_version)
  end

  # Build the adapter framework
  unless skip_build
    UI.message("ðŸ“¦ Building Adapter #{adapter_name}...")
    build_universal(adapter_name)
    xcframework(adapter_name, adapter_name, adapter_name, adapter_version)
  end

  # Create ZIP archive for the adapter
  zip(
    path: "#{$build_dir}/#{adapter_name}/#{adapter_name}-#{adapter_version}",
    output_path: "#{$build_dir}/#{adapter_name}/#{adapter_name}-#{adapter_version}/#{adapter_name}.zip"
  )

  # Generate podspec for the adapter only
  podspec(
    name: adapter_name,
    version: adapter_version,
    sdk_version: sdk_version,
    podfile: $root_dir + "/Podfile",
    s3_region: ENV["S3_REGION"],
    s3_bucket: ENV["S3_BUCKET"],
    path: $podspecs_dir,
    vendored_frameworks: "#{adapter_name}-#{adapter_version}/#{adapter_name}.xcframework",
    is_adapter: true
  )

  # Upload only the adapter archive to S3
  if upload
    aws_s3(
      access_key: ENV["S3_ACCESS_KEY"],
      secret_access_key: ENV["S3_SECRET_ACCESS_KEY"],
      bucket: ENV["S3_BUCKET"],
      region: ENV["S3_REGION"],
      acl: "bucket-owner-full-control",
      path: "#{adapter_name}/#{adapter_version}",
      files: ["#{$build_dir}/#{adapter_name}/#{adapter_name}-#{adapter_version}/#{adapter_name}.zip"]
    )
  end
end


  desc "Build podspecs for development pod"
  lane :development_podspecs do |options|
    raise "No SDK version specified".red if options[:version].nil?

    version = options[:version]
    adapters_version = options[:adapters_version] || version + ".1"

    $targets.each do |target|
      adapter_identifiers = ["BidonAdapter", "BidonCustomAdapter"]
      is_adapter = adapter_identifiers.any? { |id| target.include?(id) }
      ver = is_adapter ? adapters_version : version
      path = is_adapter ? "/Adapters/#{target}" : ""

      podspec(
        name: target,
        version: ver,
        sdk_version: version,
        podfile: $root_dir + "/Podfile",
        s3_region: ENV["S3_REGION"],
        s3_bucket: ENV["S3_BUCKET"],
        path: is_adapter  ? $development_podspec_dir + "/Adapters" : $development_podspec_dir,
        vendored_frameworks: "#{target}-#{ver}/#{target}.xcframework",
        is_adapter: is_adapter,
        is_development_pod: true
      )
    end
  end

  desc "Build production podspecs"
  lane :generate_specs do |options|
    raise "No SDK version specified".red if options[:version].nil?

    version = options[:version]
    adapters_version = options[:adapters_version] || version + ".1"

    $targets.each do |target|
      adapter_identifiers = ["BidonAdapter", "BidonCustomAdapter"]
      is_adapter = adapter_identifiers.any? { |id| target.include?(id) }
      ver = is_adapter ? adapters_version : version
      path = is_adapter ? "/Adapters/#{target}" : ""

      podspec(
        name: target,
        version: ver,
        sdk_version: version,
        podfile: $root_dir + "/Podfile",
        s3_region: ENV["S3_REGION"],
        s3_bucket: ENV["S3_BUCKET"],
        path: $podspecs_dir,
        vendored_frameworks: "#{target}-#{ver}/#{target}.xcframework",
        is_adapter: is_adapter,
        is_development_pod: false
      )
    end
  end

  lane :sandbox_env do |options|
    generate_sandbox_constants(
      path: $root_dir + "/Sandbox/Sandbox",
    )
  end

  lane :setup do |options|
    cocoapods(use_bundle_exec: true)
    generate_sandbox_constants(
      path: $root_dir + "/Sandbox/Sandbox",
    )
  end
end
